h1. Director Class

This is a fork of the "Director class":http://developer.anscamobile.com/forums/director-class created by "Ricardo Rauber":http://twitter.com/rauberlabs for Ansca's Corona SDK. It includes useful extensions developed by "Josh Tynjala":http://twitter.com/joshtynjala. This fork is currently based on version 1.2.

h2. addParamsForModule()

The @addParamsForModule()@ function allows the Director class to pass a parameters object to a module's @new()@ function when changing scenes. Rather than polluting the global namespace, you can use this function to inject data into screens when Director displays them.

bc.. local settingsData = { soundsEnabled = true }
director:addParamsForModule("settings", settingsData)
director:addParamsForModule("game", settingsData)
director:changeScene("settings", "moveFromLeft")

p. In the code above, both the settings screen and the game itself can share the same object for settings data, and they can access it without using a global variable.

Using Director's scene template as a basis, here's how you might access the parameters that are passed to @new()@:

bc.. module(..., package.seeall)
local localGroup = display.newGroup()
function new(params)

	if params.soundsEnabled then
		-- do something
	end

	------ More code here ------

	return localGroup
end

h2. Custom Effects

This version of Director includes support for custom effects. Rather than being limited to "moveFromRight", "fade", "flip", or any of the other effects built into Director, you can pass in your own effect implementations.

bc.. module(..., package.seeall)

function new(params)
	local currView = params.currView
	local nextView = params.nextView
	local time = params.time
	
	nextView.x = display.contentWidth
	nextView.y = 0
	
	transition.to ( currView, { x=display.contentWidth*-1, time=time } )
	
	transition.to( nextView, { x=0, time=time } )
end

p. The code above is a reimplementation of the @"moveFromRight"@ effect. Custom effects receive three parameters when @new()@ is called: @currView@, @nextView@, and @time@.

Using a custom effect is not much different than using a built-in effect. Instead of passing in a string, you should pass in a reference to the module.

bc.. local CustomMoveFromRight = require("CustomMoveFromRight")
director:changeScene("settings", CustomMoveFromRight)

p. The code above demonstrates how to use the custom implementation of @"moveFromRight"@ that we created earlier.
